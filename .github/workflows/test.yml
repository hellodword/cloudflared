name: Test

on:
  workflow_dispatch:
    inputs:
      HOST:
        description: "host"
        required: false
      MINUTES:
        description: "minutes"
        required: false
        default: '60'
      DEBUG:
        description: "debug"
        required: false

jobs:
  run:
    runs-on: ubuntu-20.04
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.6
      - name: Checkout oprah
        if: ${{ github.event.inputs.HOST != '' }}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: 'hellodword/oprah-proxy-go'
          ref: 'master'
          path: 'oprah'
      - name: Run testing of oprah
        id: oprah
        if: ${{ github.event.inputs.HOST != '' }}
        run: |
          cd oprah
          go mod tidy
          go run ./list > ../oprah.json
          echo "::set-output name=oprah::$(cat ../oprah.json)"
      - name: get device_id
        id: device_id
        if: ${{ github.event.inputs.HOST != '' }}
        uses: actions/github-script@v5
        with:
          result-encoding: string
          script: |
            let data = ${{ steps.oprah.outputs.oprah }}
            if (!data["device_id"] || data["device_id"] === ""){
                throw("device_id")
            }
            return data["device_id"]
      - name: get device_password
        id: device_password
        if: ${{ github.event.inputs.HOST != '' }}
        uses: actions/github-script@v5
        with:
          result-encoding: string
          script: |
            let data = ${{ steps.oprah.outputs.oprah }}
            if (!data["device_password"] || data["device_password"] === ""){
                throw("device_password")
            }
            return data["device_password"]
      - name: get ip
        id: ip
        if: ${{ github.event.inputs.HOST != '' }}
        uses: actions/github-script@v5
        with:
          result-encoding: string
          script: |
            let data = ${{ steps.oprah.outputs.oprah }}
            let ip = ""
            for (let i in data.ips){
                if (data.ips[i].geo.country_code === "AM"){
                    ip = data.ips[i].ip
                    break
                }
            }
            if (!ip || ip === ""){
                throw("ip")
            }
            return ip
      - name: debug
        if: ${{ github.event.inputs.DEBUG != '' && github.event.inputs.HOST != '' }}
        run: |
          cat oprah.json
          curl -s -i --proxy "https://${{ steps.device_id.outputs.result }}:${{ steps.device_password.outputs.result }}@eu0.sec-tunnel.com" --resolve "eu0.sec-tunnel.com:443:${{ steps.ip.outputs.result }}" https://ip.gs
      - name: Checkout codebase
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Checkout v2ray
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: 'v2fly/v2ray-core'
          ref: 'v4.44.0'
          path: 'v2ray-core'
      - name: Check Go Modules of v2ray
        run: |
          cd v2ray-core
          go mod tidy
          git diff --exit-code go.mod go.sum
          go mod verify
      - name: Run testing of v2ray
        run: |
          cd v2ray-core/common/uuid
          go test
      - name: wg
        if: ${{ github.event.inputs.HOST == '' }}
        run: |
          export DEBIAN_FRONTEND=noninteractive
          export rv4=`ip a | grep global | awk 'NR==1 {print $2}' | cut -d'/' -f1`
          sudo apt update
          sudo apt -y --no-install-recommends install openresolv dnsutils wireguard-tools
          wget -q https://github.com/ViRb3/wgcf/releases/download/v2.2.11/wgcf_2.2.11_linux_amd64
          mv wgcf* wgcf
          file wgcf
          sudo mkdir -p /usr/local/bin
          sudo cp wgcf /usr/local/bin/wgcf
          file /usr/local/bin/wgcf
          sudo chmod +x /usr/local/bin/wgcf
          echo | sudo wgcf register
          until [ $? -eq 0 ]
          do
          sleep 1s
          echo | sudo wgcf register
          done
          sudo wgcf generate
          sudo sed -i "5 s/^/PostUp = ip rule add from $rv4 lookup main\n/" wgcf-profile.conf
          sudo sed -i "6 s/^/PostDown = ip rule delete from $rv4 lookup main\n/" wgcf-profile.conf
          sudo sed -i 's/engage.cloudflareclient.com/162.159.192.1/g' wgcf-profile.conf
          sudo sed -i '/\:\:\/0/d' wgcf-profile.conf
          sudo sed -i 's/1.1.1.1/8.8.8.8/g' wgcf-profile.conf
          sudo cp wgcf-account.toml /etc/wireguard/wgcf-account.toml
          sudo cp wgcf-profile.conf /etc/wireguard/wgcf.conf
          sudo systemctl enable wg-quick@wgcf
          sudo systemctl start wg-quick@wgcf || systemctl status wg-quick@wgcf.service
          sudo rm -f wgcf*
      - name: ipv4
        if: ${{ github.event.inputs.HOST == '' }}
        run: |
          export rv4=`ip a | grep global | awk 'NR==1 {print $2}' | cut -d'/' -f1`
          sed -i "s/0\.0\.0\.0/$rv4/g" config.json
      - name: dig
        if: ${{ github.event.inputs.HOST != '' }}
        run: |
          export cfip=$(dig "${{ github.event.inputs.HOST }}" +short | head -1)
          sed -i "s/104\.17\.124\.55/$cfip/g" config.json
      - name: outbounds
        if: ${{ github.event.inputs.HOST != '' }}
        run: |
          sed -i "s/example\.com/${{ github.event.inputs.HOST }}/g" config.json
          sed -i 's/"outboundTag": "out/"outboundTag": "vout/g' config.json
          sed -i "s/OPRAH_IP/${{ steps.ip.outputs.result }}/g" config.json
          sed -i "s/OPRAH_USER/${{ steps.device_id.outputs.result }}/g" config.json
          sed -i "s/OPRAH_PASS/${{ steps.device_password.outputs.result }}/g" config.json
      - name: debug
        if: ${{ github.event.inputs.DEBUG != '' && github.event.inputs.HOST != '' }}
        run: |
          cat config.json
      - name: uuid
        run: |
          sed -i "s/CONFIG_UUID/${{ secrets.CONFIG_UUID }}/g" config.json
      - name: install nginx
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt install nginx -y
          sudo mv nginx.conf /etc/nginx/nginx.conf
          sudo service nginx restart
      - name: nginx testing
        run: |
          sudo nginx -t
      - name: increase UDP Receive Buffer Size
        run: |
          # https://github.com/lucas-clemente/quic-go/wiki/UDP-Receive-Buffer-Size
          sudo sysctl -w net.core.rmem_max=2500000
      - name: go test
        if: ${{ github.event.inputs.DEBUG == '' }}
        run: |
          sudo sysctl -w net.core.rmem_max=2500000
          cd v2ray-core
          go run ./main -c ../config.json &
          cd ..
          go mod vendor
          cd ./cmd/cloudflared
          go test -test.timeout 0 -test.run TestHello -args tunnel --url http://localhost:8000 --protocol auto --loglevel fatal
        env:
          V2RAY_VMESS_AEAD_FORCED: "false"
          MINUTES: "${{ github.event.inputs.MINUTES }}"
          TELEGRAM_BOT_TOKEN: "${{ secrets.TELEGRAM_BOT_TOKEN }}"
          TELEGRAM_CHAT_ID: "${{ secrets.TELEGRAM_CHAT_ID }}"
      - name: go test(DEBUG)
        if: ${{ github.event.inputs.DEBUG != '' }}
        run: |
          sudo sysctl -w net.core.rmem_max=2500000
          cd v2ray-core
          go run ./main -c ../config.json &
          cd ..
          go mod vendor
          cd ./cmd/cloudflared
          go test -test.timeout 0 -test.run TestHello -args tunnel --url http://localhost:8000 --protocol auto --loglevel debug
        env:
          V2RAY_VMESS_AEAD_FORCED: "false"
          MINUTES: "${{ github.event.inputs.MINUTES }}"
          TELEGRAM_BOT_TOKEN: "${{ secrets.TELEGRAM_BOT_TOKEN }}"
          TELEGRAM_CHAT_ID: "${{ secrets.TELEGRAM_CHAT_ID }}"
